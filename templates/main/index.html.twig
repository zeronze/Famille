{% extends 'base.html.twig' %}

{% block title %}Calendrier{% endblock %}

{% block stylesheets %}
  
<style>
.tippy-box[data-theme~='yellow'] {
  background-color: #FDF18C;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
  color: black;
  padding: 10px; /* Ajout de rembourrage pour améliorer l'apparence */
  border-radius: 5px; /* Coins arrondis */
  box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.2); /* Ombre douce */
  transition: background-color 0.3s, color 0.3s; /* Animation de transition en douceur */
}

/* Style au survol pour un effet interactif */
.tippy-box[data-theme~='yellow']:hover {
  background-color: gold; /* Légère variation de la couleur de fond au survol */
}

</style>

{% endblock %}


{% block body %}
<div class="container">



<a href="{{ path('app_calendar_index') }}" class="m-5 btn btn-primary">Gérer les rendez-vous</a>
    <div id="calendrier"></div>

    
</div>
{% endblock %}


{% block javascripts %}
    <script>
        window.onload = () => {
            let calendarElt = document.querySelector("#calendrier");

            let calendar = new FullCalendar.Calendar(calendarElt, {
                initialView: 'timeGridWeek',
                locale: 'fr',
                timeZone: 'Europe/Paris',
                headerToolbar: {
                    start: 'prev,next today',
                    center: 'title',
                    end: 'dayGridMonth,timeGridWeek'
                },
                events: {{ data|raw }},
                editable: true,
                eventResizableFromStart: true,
            });

            calendar.on('eventChange', (e) => {
                let url = `/api/${e.event.id}/edit`;
                let donnees = {
                    "title": e.event.title,
                    "description": e.event.extendedProps.description,
                    "start": e.event.start,
                    "end": e.event.end,
                    "backgroundColor": e.event.backgroundColor,
                    "borderColor": e.event.borderColor,
                    "textColor": e.event.textColor,
                    "allDay": e.event.allDay
                };

                let xhr = new XMLHttpRequest();
                xhr.open("PUT", url);
                xhr.send(JSON.stringify(donnees));
            });

calendar.on('eventMouseEnter', (info) => {
    const description = info.event.extendedProps.description;
    const userPseudo = info.event.extendedProps.userPseudo;

    if (description) {
        // Créez un élément de div pour contenir à la fois la description et le pseudo
        const contentDiv = document.createElement('div');
        contentDiv.innerHTML = `<p><strong>Utilisateur:</strong> ${userPseudo}</p><p>${description}</p>`;

        tippy(info.el, {
            content: contentDiv,
            arrow: true,
            placement: 'top',
            theme: 'yellow', // Appliquez le thème "yellow" que vous avez créé
        });
    }
});



            // Supprimer la tippy lorsqu'on quitte l'événement
            calendar.on('eventMouseLeave', (info) => {
                const tippyInstance = tippy(info.el);
                if (tippyInstance) {
                    tippyInstance.destroy();
                }
            });

            calendar.render();
        }
    </script>


{% endblock %}
